{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  postCards(item) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`\n      },\n      body: JSON.stringify({\n        name: item.name,\n        link: item.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  handlerDeleteCards(item) {\n    return fetch(`${this._url}/cards/${item}`, {\n      method: 'DELETE',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(item, like) {\n    return fetch(`${this._url}/cards/${item}/likes`, {\n      method: like ? 'DELETE' : 'PUT',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  getUserInfoFromServer() {\n    return fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  updateUserData(item) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`\n      },\n      body: JSON.stringify({\n        name: item.name,\n        about: item.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  updateUserAvatar(item) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`\n      },\n      body: JSON.stringify({\n        avatar: item.link\n      })\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst config = {\n  url: \"https://api.last.nomoredomains.work\"\n};\nconst api = new Api(config);\nexport default api;","map":{"version":3,"sources":["/Users/valentinadavydova/Documents/GitHub/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","method","localStorage","getItem","then","postCards","item","body","JSON","stringify","name","link","handlerDeleteCards","changeLikeCardStatus","like","getUserInfoFromServer","updateUserData","about","updateUserAvatar","avatar","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n  \n    _checkResponse(res) {\n      if (res.ok) {\n          return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  \n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`,\n            },\n        })\n        .then(this._checkResponse)\n    }\n  \n    postCards(item) {\n        return fetch(`${this._url}/cards`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`,\n            },\n            body: JSON.stringify({\n              name: item.name,\n              link: item.link,\n            })\n        })\n        .then(this._checkResponse)\n    }\n  \n    handlerDeleteCards(item) {\n      return fetch(`${this._url}/cards/${item}`, {\n          method: 'DELETE',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n          },\n      })\n      .then(this._checkResponse)\n    }\n  \n    changeLikeCardStatus(item, like) {\n      return fetch(`${this._url}/cards/${item}/likes`, {\n          method: like ? 'DELETE' : 'PUT',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`,\n          },\n      })\n      .then(this._checkResponse)\n    }\n  \n    getUserInfoFromServer() {\n        return fetch(`${this._url}/users/me`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`,\n            },\n        })\n        .then(this._checkResponse)\n    }\n  \n    updateUserData(item) {\n      return fetch(`${this._url}/users/me`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`,\n          },\n          body: JSON.stringify({\n              name: item.name,\n              about: item.about\n          })\n      })\n      .then(this._checkResponse)\n    }\n  \n    updateUserAvatar(item) {\n      return fetch(`${this._url}/users/me/avatar`, {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${localStorage.getItem('jwt')}`,\n        },\n        body: JSON.stringify({\n          avatar: item.link,\n        })\n      })\n      .then(this._checkResponse)\n    }\n}\n    \nconst config = {\n    url: \"https://api.last.nomoredomains.work\",\n};\n\nconst api = new Api(config);\n\nexport default api;"]},"metadata":{},"sourceType":"module"}