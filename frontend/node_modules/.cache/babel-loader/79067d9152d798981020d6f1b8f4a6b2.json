{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  postCards(item) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: item.name,\n        link: item.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  handlerdeleteCards(item) {\n    return fetch(`${this._url}/cards/${item}`, {\n      method: 'DELETE',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(item, like) {\n    return fetch(`${this._url}/cards/${item}/likes`, {\n      method: like ? 'DELETE' : 'PUT',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  getUserInfoFromServer() {\n    return fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  updateUserData(item) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: item.name,\n        about: item.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  updateUserAvatar(item) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: item.link\n      })\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst config = {\n  url: \"https://api.last.nomoredomains.work\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n  }\n};\nconst api = new Api(config);\nexport default api;","map":{"version":3,"sources":["/Users/valentinadavydova/Documents/GitHub/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","method","then","postCards","item","body","JSON","stringify","name","link","handlerdeleteCards","localStorage","getItem","changeLikeCardStatus","like","getUserInfoFromServer","updateUserData","about","updateUserAvatar","avatar","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n  \n    _checkResponse(res) {\n      if (res.ok) {\n          return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  \n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            method: \"GET\",\n            headers: this._headers,\n        })\n        .then(this._checkResponse)\n    }\n  \n    postCards(item) {\n        return fetch(`${this._url}/cards`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n              name: item.name,\n              link: item.link,\n            })\n        })\n        .then(this._checkResponse)\n    }\n  \n    handlerdeleteCards(item) {\n      return fetch(`${this._url}/cards/${item}`, {\n          method: 'DELETE',\n          headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n          },\n      })\n      .then(this._checkResponse)\n    }\n  \n    changeLikeCardStatus(item, like) {\n      return fetch(`${this._url}/cards/${item}/likes`, {\n          method: like ? 'DELETE' : 'PUT',\n          headers: this._headers,\n      })\n      .then(this._checkResponse)\n    }\n  \n    getUserInfoFromServer() {\n        return fetch(`${this._url}/users/me`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n            },\n        })\n        .then(this._checkResponse)\n    }\n  \n    updateUserData(item) {\n      return fetch(`${this._url}/users/me`, {\n          method: \"PATCH\",\n          headers: this._headers,\n          body: JSON.stringify({\n              name: item.name,\n              about: item.about\n          })\n      })\n      .then(this._checkResponse)\n    }\n  \n    updateUserAvatar(item) {\n      return fetch(`${this._url}/users/me/avatar`, {\n          method: \"PATCH\",\n          headers: this._headers,\n          body: JSON.stringify({\n              avatar: item.link,\n          })\n      })\n      .then(this._checkResponse)\n    }\n}\n    \nconst config = {\n    url: \"https://api.last.nomoredomains.work\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n    },\n};\n\nconst api = new Api(config);\n\nexport default api;"]},"metadata":{},"sourceType":"module"}