{"ast":null,"code":"export var BASE_URL=\"http://api.last.nomoredomains.work\";export var register=function register(password,email){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},credentials:'include',body:JSON.stringify({password:password,email:email})}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));}).then(function(res){return res;});};export var authorize=function authorize(password,email){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},credentials:'include',body:JSON.stringify({password:password,email:email})}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));});};export var getContent=function getContent(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json','Authorization':\"Bearer \".concat(token)},credentials:'include'}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));}).then(function(data){return data;});};","map":{"version":3,"sources":["/Users/valentinadavydova/Documents/GitHub/react-mesto-auth/src/utils/authUser.js"],"names":["BASE_URL","register","password","email","fetch","method","headers","credentials","body","JSON","stringify","then","res","ok","json","Promise","reject","status","authorize","getContent","token","data"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,QAAQ,CAAG,oCAAjB,CAEP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,QAAD,CAAWC,KAAX,CAAqB,CAC3C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CACjCK,MAAM,CAAE,MADyB,CAEjCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAFwB,CAMjCC,WAAW,CAAE,SANoB,CAOjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAACR,QAAQ,CAARA,QAAD,CAAWC,KAAK,CAALA,KAAX,CAAf,CAP2B,CAAvB,CAAL,CASNQ,IATM,CASD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,EAAR,CAAY,CACV,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,EAAP,CACD,CAdM,EAeNN,IAfM,CAeD,SAACC,GAAD,CAAS,CACb,MAAOA,CAAAA,GAAP,CACD,CAjBM,CAAP,CAmBD,CApBM,CAsBP,MAAO,IAAMM,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAChB,QAAD,CAAWC,KAAX,CAAqB,CAC5C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CACjCK,MAAM,CAAE,MADyB,CAEjCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAFwB,CAMjCC,WAAW,CAAE,SANoB,CAOjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAACR,QAAQ,CAARA,QAAD,CAAWC,KAAK,CAALA,KAAX,CAAf,CAP2B,CAAvB,CAAL,CAUNQ,IAVM,CAUD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,EAAR,CAAY,CACV,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,EAAP,CACD,CAfM,CAAP,CAiBD,CAlBM,CAoBP,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CACnC,MAAOhB,CAAAA,KAAK,WAAIJ,QAAJ,cAAyB,CACnCK,MAAM,CAAE,KAD2B,CAEnCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAGP,iCAA2Bc,KAA3B,CAHO,CAF0B,CAOnCb,WAAW,CAAE,SAPsB,CAAzB,CAAL,CASNI,IATM,CASD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,EAAR,CAAY,CACV,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,EAAP,CACD,CAdM,EAeNN,IAfM,CAeD,SAAAU,IAAI,QAAIA,CAAAA,IAAJ,EAfH,CAAP,CAgBD,CAjBM","sourcesContent":["export const BASE_URL = \"http://api.last.nomoredomains.work\";\n\nexport const register = (password, email) => { \n  return fetch(`${BASE_URL}/signup`, { \n    method: 'POST', \n    headers: { \n      'Accept': 'application/json', \n      'Content-Type': 'application/json' \n    }, \n    credentials: 'include', \n    body: JSON.stringify({password, email}) \n  }) \n  .then((res) => { \n    if (res.ok) { \n      return res.json(); \n    } \n    return Promise.reject(`Ошибка: ${res.status}`); \n  }) \n  .then((res) => { \n    return res; \n  }); \n\n} \n\nexport const authorize = (password, email) => { \n  return fetch(`${BASE_URL}/signin`, { \n    method: 'POST', \n    headers: { \n      'Accept': 'application/json', \n      'Content-Type': 'application/json',\n    }, \n    credentials: 'include', \n    body: JSON.stringify({password, email}) \n  }) \n\n  .then((res) => { \n    if (res.ok) { \n      return res.json(); \n    } \n    return Promise.reject(`Ошибка: ${res.status}`); \n  }); \n\n} \n\nexport const getContent = (token) => { \n  return fetch(`${BASE_URL}/users/me`, { \n    method: 'GET', \n    headers: { \n      'Accept': 'application/json', \n      'Content-Type': 'application/json', \n      'Authorization': `Bearer ${token}`, \n    },\n    credentials: 'include', \n  }) \n  .then((res) => { \n    if (res.ok) { \n      return res.json(); \n    } \n    return Promise.reject(`Ошибка: ${res.status}`); \n  }) \n  .then(data => data); \n} "]},"metadata":{},"sourceType":"module"}