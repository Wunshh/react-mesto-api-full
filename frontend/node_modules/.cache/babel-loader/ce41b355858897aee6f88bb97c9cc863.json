{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  _checkResponse(res) {\n    console.log(`Bearer ${localStorage.getItem('jwt')}`);\n\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  postCards(item) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: item.name,\n        link: item.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  handlerdeleteCards(item) {\n    return fetch(`${this._url}/cards/${item}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(item, like) {\n    return fetch(`${this._url}/cards/likes/${item}`, {\n      method: like ? 'DELETE' : 'PUT',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  getUserInfoFromServer() {\n    return fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  updateUserData(item) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: item.name,\n        about: item.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  updateUserAvatar(item) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: item.link\n      })\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst config = {\n  url: \"https://api.last.nomoredomains.work\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    'Authorization': `Bearer ${localStorage.getItem('jwt')}`\n  }\n};\nconst api = new Api(config);\nexport default api;","map":{"version":3,"sources":["/Users/valentinadavydova/Documents/GitHub/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","_checkResponse","res","console","log","localStorage","getItem","ok","json","Promise","reject","status","getInitialCards","fetch","method","then","postCards","item","body","JSON","stringify","name","link","handlerdeleteCards","changeLikeCardStatus","like","getUserInfoFromServer","updateUserData","about","updateUserAvatar","avatar","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n  \n    _checkResponse(res) {\n        console.log(`Bearer ${localStorage.getItem('jwt')}`);\n      if (res.ok) {\n          return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  \n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            method: \"GET\",\n            headers: this._headers,\n        })\n        .then(this._checkResponse)\n    }\n  \n    postCards(item) {\n        return fetch(`${this._url}/cards`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n              name: item.name,\n              link: item.link,\n            })\n        })\n        .then(this._checkResponse)\n    }\n  \n    handlerdeleteCards(item) {\n      return fetch(`${this._url}/cards/${item}`, {\n          method: 'DELETE',\n          headers: this._headers,\n      })\n      .then(this._checkResponse)\n    }\n  \n    changeLikeCardStatus(item, like) {\n      return fetch(`${this._url}/cards/likes/${item}`, {\n          method: like ? 'DELETE' : 'PUT',\n          headers: this._headers,\n      })\n      .then(this._checkResponse)\n    }\n  \n    getUserInfoFromServer() {\n        return fetch(`${this._url}/users/me`, {\n            method: \"GET\",\n            headers: this._headers,\n        })\n        .then(this._checkResponse)\n    }\n  \n    updateUserData(item) {\n      return fetch(`${this._url}/users/me`, {\n          method: \"PATCH\",\n          headers: this._headers,\n          body: JSON.stringify({\n              name: item.name,\n              about: item.about\n          })\n      })\n      .then(this._checkResponse)\n    }\n  \n    updateUserAvatar(item) {\n      return fetch(`${this._url}/users/me/avatar`, {\n          method: \"PATCH\",\n          headers: this._headers,\n          body: JSON.stringify({\n              avatar: item.link,\n          })\n      })\n      .then(this._checkResponse)\n    }\n}\n    \nconst config = {\n    url: \"https://api.last.nomoredomains.work\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('jwt')}`,\n    },\n};\n\nconst api = new Api(config);\n\nexport default api;"]},"metadata":{},"sourceType":"module"}